{"version":3,"sources":["components/Nav.js","components/NotFound.js","components/Photo.js","components/PhotoContainer.js","components/SearchForm.js","config.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Nav","className","exact","to","NotFound","Photo","props","src","url","alt","title","withRouter","photos","results","data","length","map","photo","server","id","secret","value","match","params","query","useEffect","handleSearch","SearchForm","handleSubmit","e","preventDefault","onSearch","path","history","push","currentTarget","reset","onSubmit","this","type","ref","input","placeholder","React","Component","apiKey","App","state","cats","dogs","cars","loading","error","performSearch","setState","axios","get","then","res","catch","console","log","catsResults","dogsResult","carsResults","process","component","render","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wOAceA,EAVH,kBACR,qBAAMC,UAAU,WAAhB,SACI,+BACI,6BAAI,cAAC,IAAD,CAASC,OAAK,EAACC,GAAG,QAAlB,oBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,QAAZ,oBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,QAAZ,0BCMDC,EAbE,kBAEb,qBAAKH,UAAU,sBAAf,SACA,sBAAKA,UAAU,YAAf,UACI,sCACA,2CACA,iFCCOI,EAND,SAACC,GAAD,OACV,6BACI,qBAAKC,IAAKD,EAAME,IAAKC,IAAKH,EAAMI,W,OC8CzBC,eA9CQ,SAACL,GAGpB,IACIM,EADEC,EAAUP,EAAMQ,KAKlBF,EADAC,EAAQE,OAAS,EACRF,EAAQG,KAAI,SAAAC,GAAK,OACtB,cAAC,EAAD,CAEAT,IAAG,wCAAmCS,EAAMC,OAAzC,YAAmDD,EAAME,GAAzD,YAA+DF,EAAMG,OAArE,UACHV,MAAOO,EAAMP,OAFRO,EAAME,OAMN,cAAC,EAAD,IAUb,IAAIE,EAAQf,EAAMgB,MAAMC,OAAOC,MAY/B,OARAC,qBAAU,WACFnB,EAAMI,QAAUW,GAChBf,EAAMoB,aAAaL,MAQvB,qBAAKpB,UAAU,kBAAf,SACI,6BAAKW,SC3CXe,E,4MAEFC,aAAe,SAACC,GACZA,EAAEC,iBAEF,EAAKxB,MAAMyB,SAAS,EAAKP,MAAMH,OAC/B,IAAIW,EAAI,kBAAc,EAAKR,MAAMH,OAEjC,EAAKf,MAAM2B,QAAQC,KAAKF,GACxBH,EAAEM,cAAcC,S,4CAEpB,WAAS,IAAD,OACJ,OACG,uBAAMC,SAAUC,KAAKV,aAAc3B,UAAU,cAA7C,UACE,uBACAsC,KAAK,OACLC,IAAK,SAACC,GAAD,OAAW,EAAKjB,MAAQiB,GAC7BC,YAAY,WACZ,wBAAQH,KAAK,SAAb,wB,GAlBYI,IAAMC,WA0BhBjC,cAAWgB,G,iBC5BXkB,EADA,mCCmIAC,E,4MAnHbC,MAAQ,CACNnC,OAAQ,GACRoC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNxC,MAAO,GACPyC,SAAS,EACTC,OAAM,G,EAIRC,cAAgB,SAAC7B,GACf,EAAK8B,SAAS,CAACH,SAAQ,IACvBI,IAAMC,IAAN,oFAAuFX,EAAvF,iBAAsGrB,EAAtG,8CACCiC,MAAM,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAC1B1C,OAAQ8C,EAAI5C,KAAKF,OAAOK,MACxBP,MAAMc,EACN2B,SAAQ,EACRC,OAAM,OAEPO,OAAM,SAAAP,GACL,EAAKE,SAAS,CAACF,OAAM,IACrBQ,QAAQC,IAAI,iCAAkCT,O,EAalDU,YAAc,WAAuB,IAArBtC,EAAoB,uDAAZ,OACtB,EAAK8B,SAAS,CAACH,SAAQ,IACvBI,IAAMC,IAAN,oFAAuFX,EAAvF,iBAAsGrB,EAAtG,8CACKiC,MAAM,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAC1BN,KAAMU,EAAI5C,KAAKF,OAAOK,MACtBkC,SAAQ,EACRC,OAAM,OAEPO,OAAM,SAAAP,GACL,EAAKE,SAAS,CAACF,OAAM,IACvBQ,QAAQC,IAAI,iCAAkCT,O,EAKpDW,WAAa,WAAqB,IAApBvC,EAAmB,uDAAX,OACpB,EAAK8B,SAAS,CAACH,SAAQ,IACvBI,IAAMC,IAAN,oFAAuFX,EAAvF,iBAAsGrB,EAAtG,8CACGiC,MAAM,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAC1BL,KAAMS,EAAI5C,KAAKF,OAAOK,MACtBkC,SAAQ,EACRC,OAAM,OAEPO,OAAM,SAAAP,GACL,EAAKE,SAAS,CAACF,OAAM,IACvBQ,QAAQC,IAAI,iCAAkCT,O,EAKlDY,YAAc,WAAuB,IAArBxC,EAAoB,uDAAZ,OACtB,EAAK8B,SAAS,CAACH,SAAQ,IACvBI,IAAMC,IAAN,oFAAuFX,EAAvF,iBAAsGrB,EAAtG,8CACCiC,MAAM,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAC1BJ,KAAMQ,EAAI5C,KAAKF,OAAOK,MACtBkC,SAAQ,EACRC,OAAM,OAEPO,OAAM,SAAAP,GACL,EAAKE,SAAS,CAACF,OAAM,IACvBQ,QAAQC,IAAI,iCAAkCT,O,uDA/ClD,WACEd,KAAKwB,cACLxB,KAAKyB,aACLzB,KAAK0B,gB,oBAiDL,WAAU,IAAD,OACP,OAEI,sBAAK/D,UAAU,MAAf,UAEE,cAAC,EAAD,CAAY8B,SAAUO,KAAKe,gBAC3B,cAAC,EAAD,IAEEf,KAAKS,MAAMK,MAAQ,8CACnBd,KAAKS,MAAMI,QAAU,kDACtB,eAAC,IAAD,WACC,cAAC,IAAD,CAAOjD,OAAK,EAAC8B,KAAMiC,iBAA8BC,UAAY,kBAAM,cAAC,IAAD,CAAU/D,GAAG,aAChF,cAAC,IAAD,CAAOD,OAAK,EAAC8B,KAAK,QAAQmC,OAAS,kBAAM,cAAC,EAAD,CAAgBrD,KAAM,EAAKiC,MAAMC,UAC1E,cAAC,IAAD,CAAO9C,OAAK,EAAC8B,KAAK,QAAQmC,OAAS,kBAAM,cAAC,EAAD,CAAgBrD,KAAM,EAAKiC,MAAME,UAC1E,cAAC,IAAD,CAAO/C,OAAK,EAAC8B,KAAK,QAAQmC,OAAS,kBAAM,cAAC,EAAD,CAAgBrD,KAAM,EAAKiC,MAAMG,UAE1E,cAAC,IAAD,CAAOlB,KAAK,iBAAiBmC,OAAQ,kBACnC,cAAC,EAAD,CACErD,KAAM,EAAKiC,MAAMnC,OACjBF,MAAO,EAAKqC,MAAMrC,MAClBgB,aAAc,EAAK2B,cACnBF,QAAS,EAAKJ,MAAMI,aAGxB,cAAC,IAAD,CAAOe,UAAW9D,c,GA1GZwC,aCFZwB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlD,MAAM,2DAqCnC,SAASmD,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTjB,MAAK,SAACsB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf6B,UAAUC,cAAcO,YAI1BxB,QAAQC,IACN,+GAKEc,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBnB,QAAQC,IAAI,sCAGRc,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BpB,OAAM,SAACP,GACNQ,QAAQR,MAAM,4CAA6CA,MC9FjE,IAYemC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAAS5B,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEF6B,SAASC,eAAe,SFQnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIjC,gBAAwBK,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMT,gBAAN,sBAEPG,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5B9C,MAAK,SAAC+C,GAEL,IAAMC,EAAcD,EAASD,QAAQ/C,IAAI,gBAEnB,MAApBgD,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAMnD,MAAK,SAACsB,GAClCA,EAAa8B,aAAapD,MAAK,WAC7Ba,OAAOC,SAASuC,eAKpBrC,EAAgBC,EAAOC,MAG1BhB,OAAM,WACLC,QAAQC,IAAI,oEAtFVkD,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAMnD,MAAK,WACjCG,QAAQC,IACN,+GAMJY,EAAgBC,EAAOC,OE9B/BqC,GAKAzB,M","file":"static/js/main.6f86c1c4.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Nav = () => (\n    <nav  className=\"main-nav\">\n        <ul>\n            <li><NavLink exact to=\"/cats\">Cats</NavLink></li>\n            <li><NavLink to=\"/dogs\">Dogs</NavLink></li>\n            <li><NavLink to=\"/cars\">Cars</NavLink></li>\n        </ul>    \n    </nav>\n)\n\nexport default Nav;","import React from 'react';\n\nconst NotFound = () => (\n\n    <div className=\"not-found-container\">\n    <div className=\"not-found\">\n        <h2>Oops</h2>\n        <h3>Not Found</h3>\n        <h3>This search query has returned no results</h3>    \n    </div>\n               \n\n    </div>\n);\n\nexport default NotFound;","import React from 'react';\n\n/*  Displays the li and img elements*/\nconst Photo = (props) => (\n    <li>\n        <img src={props.url} alt={props.title}></img>\n    </li>\n)\n\nexport default Photo;","import React, { useEffect } from \"react\";\nimport NotFound from \"./NotFound\";\nimport Photo from './Photo';\nimport { withRouter } from 'react-router-dom' // This is needed when dealing with objects as match\n\nconst PhotoContainer = (props) => {\n\n    // Get the results transfered via pros data\n    const results = props.data;\n    let photos;\n\n    // If there are data returned from searchForm\n    if (results.length > 0){\n        photos = results.map(photo => (\n            <Photo \n            key={photo.id} \n            url={`https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_m.jpg`}\n            title={photo.title}\n            />\n        ));\n    } else {\n        photos = <NotFound />\n    }\n\n    /* \n    Used in case of reload on \"/search/:query\" route, it will allow the browser to reload\n    the correct query and toggle back and forward.\n    When reloads, let's say the query entered by the user becomes empty\n    so this user query and props.match.params.query would not be equal ; therefore\n    handleSearch(value) would be called again.\n    */\n    let value = props.match.params.query;\n    //console.log(\"props.match.params.query....: \" + value);\n    //console.log(\"query entered by user...: \" + props.title)\n\n    useEffect(() => {\n        if (props.title !== value) {\n            props.handleSearch(value);\n        }\n    });\n\n    //console.log(props.loading);\n\n    return(\n\n        <div className=\"photo-container\">\n            <ul>{photos}</ul>\n\n        </div>\n        )   \n}\nexport default withRouter(PhotoContainer);","import React from \"react\";\nimport { withRouter } from 'react-router-dom';  // This is needed when dealing with object as history\n\nclass SearchForm extends React.Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n      \n        this.props.onSearch(this.query.value); // this.query.value is a reference of what the user types made it in input\n        let path = `/search/${this.query.value}`; // create the 'path' for search\n        //console.log(this.props.history);\n        this.props.history.push(path); // push the 'path' in history object. This will be matched in app.js with the route \"/search:query\"\n        e.currentTarget.reset(); // reset the input value to empty\n    }\n    render(){\n        return (\n           <form onSubmit={this.handleSubmit} className=\"search-form\">\n             <input \n             type=\"text\" \n             ref={(input) => this.query = input}\n             placeholder=\"Search\"/>\n             <button type=\"submit\">Go!</button>\n           </form> \n           \n        )\n    }\n\n\n}\nexport default withRouter(SearchForm);","const apiKey = '210a677dfe4920704dfa203a5b15b589';\nexport default apiKey;","import React, { Component } from 'react';\nimport './index.css';\nimport Nav from './components/Nav';\nimport PhotoContainer from './components/PhotoContainer';\nimport SearchForm from './components/SearchForm';\nimport NotFound from './components/NotFound';\nimport {\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport axios from 'axios';\nimport apiKey from './config';\n\nclass App extends Component {\n\n  state = {\n    photos: [],\n    cats: [],\n    dogs: [],\n    cars: [],\n    title: \"\",\n    loading: false, // Show/Hide loading text between get requests.\n    error:false\n  }\n\n  /* Perform a Search with the query typed by the user */\n  performSearch = (query) => {\n    this.setState({loading:true})\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n    .then( res => this.setState({\n      photos: res.data.photos.photo,\n      title:query,\n      loading:false,\n      error:false\n    }))\n    .catch(error => {\n      this.setState({error:true});\n      console.log('Error fetching in parsing data', error)\n    } );\n   \n}\n\n/*This functions would be called immediately when the page mounts */\ncomponentDidMount() {\n  this.catsResults();\n  this.dogsResult();\n  this.carsResults();\n}\n\n  /* Fetch Cats */ \n  catsResults = ( query = \"cats\" ) => {\n    this.setState({loading:true})\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n        .then( res => this.setState({\n          cats: res.data.photos.photo,\n          loading:false,\n          error:false\n        }))\n        .catch(error => {\n          this.setState({error:true})\n        console.log('Error fetching in parsing data', error)\n        } );\n  }\n\n  /* Fetch dogs */\n  dogsResult = (query = \"dogs\") => {\n    this.setState({loading:true})\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n      .then( res => this.setState({\n        dogs: res.data.photos.photo,\n        loading:false,\n        error:false\n      }))\n      .catch(error => {\n        this.setState({error:true})\n      console.log('Error fetching in parsing data', error)\n      } );\n  }\n\n  /* Fetch cars */\n  carsResults = ( query = \"cars\" ) => {\n    this.setState({loading:true})\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n    .then( res => this.setState({\n      cars: res.data.photos.photo,\n      loading:false,\n      error:false\n    }))\n    .catch(error => {\n      this.setState({error:true})\n    console.log('Error fetching in parsing data', error)\n    } );\n  }\n\n\n  render() {\n    return (\n      \n        <div className=\"App\">\n        \n          <SearchForm onSearch={this.performSearch} />\n          <Nav />\n          {/* two if conditions */}\n          { this.state.error ? <p> Not found...</p> : \n            this.state.loading ? <p>Loading images...</p> : \n          (<Switch>\n            <Route exact path={process.env.PUBLIC_URL + '/'} component={ () => <Redirect to=\"/cats\" />}/>\n            <Route exact path=\"/cats\" render={ () => <PhotoContainer data={this.state.cats}/>} />\n            <Route exact path=\"/dogs\" render={ () => <PhotoContainer data={this.state.dogs}/>} />\n            <Route exact path=\"/cars\" render={ () => <PhotoContainer data={this.state.cars}/>} />\n\n            <Route path=\"/search/:query\" render={() => \n              <PhotoContainer\n                data={this.state.photos}  \n                title={this.state.title}\n                handleSearch={this.performSearch}\n                loading={this.state.loading}\n                />} \n            /> \n            <Route component={NotFound} />\n          </Switch>)\n          }\n\n        </div>\n\n    )\n  }\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}